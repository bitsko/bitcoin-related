#!/usr/bin/bc

# functions for calculating roots

# accepts a number (x), square or cubic root (r) and mod (p)
# returns roots of x in array the passed array
# *roots[0] will hold the number of roots returned
define void rootmod_api(x, r, p, *roots[]){

    # auto rm_s, rm_q, rm_z, rm_c, ts_ret, rootvals[];
    auto ts_ret, rootvals[];

    roots[0] = 0;
    rootvals[0] = 0;

    if (! is_residue(x, r, p)){
        print "\n# *** Not a residue of pow ", r, "\n";
        roots[1] = 0;
        return;
    }
    set_root_values(r, p, rootvals[]);
    # rm_s = rootvals[1];
    # rm_q = rootvals[2];
    # rm_z = rootvals[0];
    # rm_c = rootvals[3];

    # print "s : ", rootvals[1], " q : ", rootvals[2], " z : ", rootvals[0], " c : ", rootvals[3], "\n";
    ts_ret = tonelli_shanks_api(x, r, rootvals[1], rootvals[2], rootvals[3], p);

    if ( r % 2 == 0 ){

        roots[0] = 2;
        roots[1] = ts_ret
        roots[2] = mod( -ts_ret, p);
    } else {

        roots[0] = 3;
        roots[1] = ts_ret;
        roots[2] = mod(ts_ret * rootvals[3], p);
        roots[3] = mod(ts_ret * invmod(rootvals[3], p), p);
    }
}

# computes square or cube roots from a number (n)
# prints the results and returns the first root returned by the api
define rootmod(n, r, p){

    auto i, roots[];

    rootmod_api(n, r, p, roots[]);
    print "\n# rootmod()\n#\n";
    for ( i=1; i <= roots[0]; i++){
        print "# r", i, " = ", roots[i], "\n";
    }
    return roots[1];
}
