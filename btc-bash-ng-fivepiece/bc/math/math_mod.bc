#!/usr/bin/bc

# functions for simple modular arithmetic

# simple mod
define mod(a, n){

    if (a < 0){

        return ((a % n) + n);
    }
    return (a % n);
}

# returns the inverse of a in n
# (stripped down egcd)
# https://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Extended_Euclidean_algorithm
# Guide to ECC Algorithm 2.20
define invmod(a, p){

    auto u, v, x, x1, x2, q, r;

    u = mod(a, p);
    v = p;
    x1 = 1;
    x2 = 0;
    while (u != 1){

        q = v / u;
        r = v - q*u;
        x = x2 - q*x1;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
    }
    return mod(x1, p);
}

# returns base to the power exp mod n
define powmod(base, exp, n){

    auto res, b, e;

    b = mod(base, n);
    e = mod(exp, n);
    res = 1;

    while (e > 0){

        if (e % 2){
            res = mod((res * b), n);
        }
        b = mod((b * b), n);
        e = (e / 2);
    }
    return res;
}
