#!/usr/bin/bc

# bitwise logic functions

define void bwand_api(*arra[], *arrb[], *ret[]){

    auto i;

    ret[0] = max(arra[0], arrb[0]);

    for ( i=1; i<=ret[0]; i++ ){

        ret[i] = ( arra[i] && arrb[i] );
    }
}

define bwand(a, b){

    auto arra[], arrb[], ret[];

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    bwand_api(arra[], arrb[], ret[]);

    return bitarr2num(ret[]);
}


define void bwor_api(*arra[], *arrb[], *ret[]){

    auto i;

    ret[0] = max(arra[0], arrb[0]);

    for ( i=1; i<=ret[0]; i++ ){

        ret[i] = ( arra[i] || arrb[i] );
    }
}

define bwor(a, b){

    auto arra[], arrb[], ret[];

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    bwor_api(arra[], arrb[], ret[]);

    return bitarr2num(ret[]);
}

define void bwxor_api(*arra[], *arrb[], *ret[]){

    auto i;

    ret[0] = max(arra[0], arrb[0]);

    for ( i=1; i<=ret[0]; i++ ){

        ret[i] = (( arra[i] || arrb[i] ) && !( arra[i] && arrb[i] ));
    }
}

define bwxor(a, b){

    auto arra[], arrb[], ret[];

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    bwxor_api(arra[], arrb[], ret[]);

    return bitarr2num(ret[]);
}

define void bwnot_api(*arr[], *ret[]){

    auto i;

    ret[0] = arr[0];

    for ( i=1; i<=ret[0]; i++ ){

        ret[i] = ( ! arr[i] );
    }
}

define bwnot(a){

    auto arr[], ret[];

    num2bitarr(a, arr[]);

    bwnot_api(arr[], ret[]);

    return bitarr2num(ret[]);
}

define void bwnand_api(*arra[], *arrb[], *ret[]){

    auto tmp[];
    bwand_api(arra[], arrb[], tmp[]);
    bwnot_api(tmp[], ret[]);
}

define bwnand(a, b){

    auto arra[], arrb[], ret[];

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    bwnand_api(arra[], arrb[], ret[]);

    return bitarr2num(ret[]);
}

define void bwnor_api(*arra[], *arrb[], *ret[]){

    auto tmp[];
    bwor_api(arra[], arrb[], tmp[]);
    bwnot_api(tmp[], ret[]);
}

define bwnor(a, b){

    auto arra[], arrb[], ret[];

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    bwnor_api(arra[], arrb[], ret[]);

    return bitarr2num(ret[]);
}

define void bwxnor_api(*arra[], *arrb[], *ret[]){

    auto tmp[];
    bwxor_api(arra[], arrb[], tmp[]);
    bwnot_api(tmp[], ret[]);
}

define bwxnor(a, b){

    auto arra[], arrb[], ret[];

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    bwxnor_api(arra[], arrb[], ret[]);

    return bitarr2num(ret[]);
}
