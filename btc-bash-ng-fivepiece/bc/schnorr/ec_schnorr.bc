#!/usr/bin/bc

define ec_schnorr_sign_api(h, d, k, n){

    return mod(k - (h * d), n);
}

define ec_schnorr_sign(h, d, k){

    return ec_schnorr_sign_api(h, d, k, curve_n);
}

define ec_schnorr_verify_api(x, y, gx, gy, h, s, n, p, *r[]){ #TODO less input

    auto sg[], hp[], rk[];

    if ( !( (0 <= h) && (h < 2^(curve_words*4)) ) && ( (1 <= s) && (s < n) )){
        return 0;
    }
    ecmul_api(s, gx, gy, n, p, sg[]);
    ecmul_api(h, x, y, n, p, hp[]);
    ecadd_api(sg[0], sg[1], hp[0], hp[1], p, rk[]);

    if ( ispoint_api(rk[0], rk[1], curve_a, curve_b, p) ){
        r[0] = rk[0];
        r[1] = rk[1];
        return 1;
    } else {
        r[0] = 0;
        r[1] = 0;
        return 0;
    }
}

define void ec_schnorr_verify(p, h, s){

    auto p1[], valid, rk[];

    uncompresspoint_api(p, p1[]);
    valid = ec_schnorr_verify_api(p1[0], p1[1], curve_gx, curve_gy, h, s, curve_n, curve_p, rk[]);
    if (valid){
        left_pad(rk[0], curve_words);
    } else {
        0;
    }
}
