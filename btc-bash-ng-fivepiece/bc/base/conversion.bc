#!/usr/bin/bc

# functions to handle numbers as bits or words


# returns the number of words (4 bits) in a number
define wordlen(n){

    auto num, ans, i;
    ans = -1;
    i = -1;

    if ( n == 0 ){
        return 1;
    }

    num = n;

    if ( n < 0 ){
        num = (num * -1);
    }

    while (ans <= 0){
        i=i+1;
        ans=( (10^i)-(num) );
    }

    return i;
}

define bytelen(n){

    return (wordlen(n)+1)/2;
}

# accepts a number, a base to convert to and an array to place
# the converted number
# cvrt[0] = array length
# numbers are placed in cvrt[1..n] where LSB is at cvrt[1] and so on
define void base_convert_api(n, b, *cvrt[]){

    auto ibit;

    ibit = 0;

    if ( n == 0 ){
        cvrt[0] = 1;
        cvrt[1] = 0;
        return;
    }

    while ( n > 0 ){

        cvrt[ibit+1] = ( n % b );
        ibit = ibit+1;
        n /= b;
    }

    cvrt[0] = ibit;
}

# accepts a number and a base, prints the converted number
# as its factors LSB is leftmost
define void base_convert(n, b){

    auto newbase[], i;
    base_convert_api(n, b, newbase[]);

    for ( i=1; i<=newbase[0]; i++ ){
        print newbase[i], " ";
    }
    print "\n";
}

# accepts an array containing a base-converted number
# returns the number in obase
define base_restore(b, *arr[]){

    auto res, i;
    for ( i=1; i<=arr[0]; i++ ){
        res += b^(i-1) * arr[i];
    }
    return res;
}

# accepts a number and named array
# ret[0] = array length
# bits are placed in ret[1..n] where LSB is at ret[1] and so on
define void num2bitarr(n, *ret[]){

    base_convert_api(n, 2, ret[]);
}

# accepts an array such as the output from num2bitarr()
# returns the number converted back from it
define bitarr2num(*ret[]){

    return base_restore(2, ret[]);
}
