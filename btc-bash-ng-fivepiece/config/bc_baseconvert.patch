diff -crB bc-1.07.1/bc/storage.c bc-1.07.1-baseconvert.patch/bc/storage.c
*** bc-1.07.1/bc/storage.c	2017-04-08 01:20:02.000000000 +0300
--- bc-1.07.1-baseconvert.patch/bc/storage.c	2018-02-24 20:56:16.290669480 +0200
***************
*** 1018,1023 ****
--- 1018,1024 ----
  	
  		/* Compute source index and make sure some structure exists. */
  		ix = (int) bc_num2long (ex_stack->s_num);
+         ix = (int) array_index_base_convert_high_to_dec (ix, i_base);
  		(void) get_array_num (ix, 0);    
  	
  		/* Push a new array and Compute Destination index */
diff -crB bc-1.07.1/h/number.h bc-1.07.1-baseconvert.patch/h/number.h
*** bc-1.07.1/h/number.h	2017-04-08 01:20:02.000000000 +0300
--- bc-1.07.1-baseconvert.patch/h/number.h	2018-02-24 20:55:52.118693620 +0200
***************
*** 140,143 ****
--- 140,152 ----
  			     int leading_zero);
  
  void bc_out_long (long val, int size, int space, void (*out_char)(int));
+ 
+ 
+ /* btcbash patch begin */
+ 
+ /* functions to correctly handle array indexes when in bases higher than 10 */
+ 
+ long array_index_base_convert_high_to_dec(long num, int ibase);
+ 
+ /* btcbash patch end */
  #endif
diff -crB bc-1.07.1/lib/number.c bc-1.07.1-baseconvert.patch/lib/number.c
*** bc-1.07.1/lib/number.c	2017-04-08 01:20:02.000000000 +0300
--- bc-1.07.1-baseconvert.patch/lib/number.c	2018-02-24 20:55:34.490711250 +0200
***************
*** 1735,1737 ****
--- 1735,1778 ----
  }
  
  #endif
+ 
+ 
+ /* btcbash patch begin */
+ 
+ /* function to correctly handle array indexes when in bases higher than 10 */
+ 
+ // simple helper function for the next one
+ // takes base and exponent, returns the base to the power of the exponent
+ long
+ intpow(int base, int exp)
+ {
+   int ret = 1;
+ 
+   while (exp > 0)
+   {
+     ret *= base;
+     --exp;
+   }
+   return ret;
+ }
+ 
+ // takes an index integer in (ibase > 10), returns the index at base 10
+ long
+ array_index_base_convert_high_to_dec(long num, int ibase)
+ {
+   if (num < ibase)
+     return num;
+ 
+   int mod = 0, ret = 0, pow = 0;
+ 
+   while (num > 0)
+   {
+     mod = num % ibase;
+     ret += (mod * (intpow(10 ,pow)));
+     num /= ibase;
+     ++pow;
+   }
+   return ret;
+ }
+ 
+ /* btcbash patch end */
